/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __SIGKILL_SKEL_H__
#define __SIGKILL_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct sigkill {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rb;
	} maps;
	struct {
		struct bpf_program *handle_ptrace;
	} progs;
	struct {
		struct bpf_link *handle_ptrace;
	} links;

#ifdef __cplusplus
	static inline struct sigkill *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct sigkill *open_and_load();
	static inline int load(struct sigkill *skel);
	static inline int attach(struct sigkill *skel);
	static inline void detach(struct sigkill *skel);
	static inline void destroy(struct sigkill *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
sigkill__destroy(struct sigkill *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
sigkill__create_skeleton(struct sigkill *obj);

static inline struct sigkill *
sigkill__open_opts(const struct bpf_object_open_opts *opts)
{
	struct sigkill *obj;
	int err;

	obj = (struct sigkill *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = sigkill__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	sigkill__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct sigkill *
sigkill__open(void)
{
	return sigkill__open_opts(NULL);
}

static inline int
sigkill__load(struct sigkill *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct sigkill *
sigkill__open_and_load(void)
{
	struct sigkill *obj;
	int err;

	obj = sigkill__open();
	if (!obj)
		return NULL;
	err = sigkill__load(obj);
	if (err) {
		sigkill__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
sigkill__attach(struct sigkill *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
sigkill__detach(struct sigkill *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *sigkill__elf_bytes(size_t *sz);

static inline int
sigkill__create_skeleton(struct sigkill *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "sigkill";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "rb";
	s->maps[0].map = &obj->maps.rb;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "handle_ptrace";
	s->progs[0].prog = &obj->progs.handle_ptrace;
	s->progs[0].link = &obj->links.handle_ptrace;

	s->data = sigkill__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *sigkill__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x48\x15\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x1a\0\
\x01\0\x85\0\0\0\x0e\0\0\0\xbf\x07\0\0\0\0\0\0\xb7\x01\0\0\x09\0\0\0\x85\0\0\0\
\x6d\0\0\0\xbf\x08\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\
\x18\0\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x83\0\0\0\xbf\x06\0\0\0\0\0\0\x15\x06\
\x0d\0\0\0\0\0\x77\x07\0\0\x20\0\0\0\x63\x76\0\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\
\x15\x08\x01\0\0\0\0\0\xb7\x01\0\0\0\0\0\0\x73\x16\x14\0\0\0\0\0\xbf\x61\0\0\0\
\0\0\0\x07\x01\0\0\x04\0\0\0\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\0\xbf\x61\
\0\0\0\0\0\0\xb7\x02\0\0\0\0\0\0\x85\0\0\0\x84\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x33\0\0\0\x05\0\x08\0\x03\0\0\0\x0c\
\0\0\0\x1d\0\0\0\x24\0\0\0\x04\x10\x68\x06\x77\0\x10\x20\x25\x9f\x04\x68\xc8\
\x01\x01\x57\0\x04\x28\xd8\x01\x01\x58\0\x04\x58\xd8\x01\x01\x56\0\x01\x11\x01\
\x25\x25\x13\x05\x03\x25\x72\x17\x10\x17\x1b\x25\x11\x1b\x12\x06\x73\x17\x8c\
\x01\x17\0\0\x02\x34\0\x03\x25\x49\x13\x3a\x0b\x3b\x05\0\0\x03\x26\0\x49\x13\0\
\0\x04\x0f\0\x49\x13\0\0\x05\x15\0\x49\x13\x27\x19\0\0\x06\x16\0\x49\x13\x03\
\x25\x3a\x0b\x3b\x0b\0\0\x07\x24\0\x03\x25\x3e\x0b\x0b\x0b\0\0\x08\x15\x01\x49\
\x13\x27\x19\0\0\x09\x05\0\x49\x13\0\0\x0a\x0f\0\0\0\x0b\x15\x01\x27\x19\0\0\
\x0c\x34\0\x03\x25\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\x02\x18\0\0\x0d\x13\x01\x0b\
\x0b\x3a\x0b\x3b\x0b\0\0\x0e\x0d\0\x03\x25\x49\x13\x3a\x0b\x3b\x0b\x38\x0b\0\0\
\x0f\x01\x01\x49\x13\0\0\x10\x21\0\x49\x13\x37\x0b\0\0\x11\x24\0\x03\x25\x0b\
\x0b\x3e\x0b\0\0\x12\x21\0\x49\x13\x37\x06\0\0\x13\x2e\x01\x11\x1b\x12\x06\x40\
\x18\x7a\x19\x03\x25\x3a\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x14\x05\0\x03\
\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\x15\x34\0\x02\x22\x03\x25\x3a\x0b\x3b\x0b\x49\
\x13\0\0\x16\x13\x01\x03\x25\x0b\x0b\x3a\x0b\x3b\x0b\0\0\x17\x13\x01\x03\x25\
\x0b\x0b\x3a\x0b\x3b\x05\0\0\x18\x0d\0\x03\x25\x49\x13\x3a\x0b\x3b\x05\x38\x0b\
\0\0\0\x44\x02\0\0\x05\0\x01\x08\0\0\0\0\x01\0\x0c\0\x01\x08\0\0\0\0\0\0\0\x02\
\x01\xd8\0\0\0\x08\0\0\0\x0c\0\0\0\x02\x03\x30\0\0\0\x02\x72\x01\x03\x35\0\0\0\
\x04\x3a\0\0\0\x05\x3f\0\0\0\x06\x47\0\0\0\x05\x01\x16\x07\x04\x07\x08\x02\x06\
\x54\0\0\0\x02\xa6\x0a\x03\x59\0\0\0\x04\x5e\0\0\0\x08\x69\0\0\0\x09\x6d\0\0\0\
\0\x07\x07\x05\x08\x06\x75\0\0\0\x09\x01\x12\x07\x08\x07\x04\x02\x0a\x82\0\0\0\
\x02\x68\x0c\x03\x87\0\0\0\x04\x8c\0\0\0\x08\xa1\0\0\0\x09\xa1\0\0\0\x09\x3f\0\
\0\0\x09\x3f\0\0\0\0\x0a\x02\x0b\xab\0\0\0\x02\x8c\x01\x03\xb0\0\0\0\x04\xb5\0\
\0\0\x08\x69\0\0\0\x09\xa1\0\0\0\x09\x6d\0\0\0\0\x02\x0c\xce\0\0\0\x02\x7a\x0c\
\x03\xd3\0\0\0\x04\xd8\0\0\0\x0b\x09\xa1\0\0\0\x09\x3f\0\0\0\0\x0c\x0d\xef\0\0\
\0\0\x0d\x02\xa1\0\x0d\x10\0\x0a\x0e\x0e\x06\x01\0\0\0\x0b\0\x0e\x11\x1f\x01\0\
\0\0\x0c\x08\0\x04\x0b\x01\0\0\x0f\x17\x01\0\0\x10\x1b\x01\0\0\x1b\0\x07\x0f\
\x05\x04\x11\x10\x08\x07\x04\x24\x01\0\0\x0f\x17\x01\0\0\x12\x1b\x01\0\0\0\0\
\x04\0\0\x13\x01\xd8\0\0\0\x01\x5a\x12\0\x10\x17\x01\0\0\x14\x1f\0\x10\xc4\x01\
\0\0\x15\0\x13\0\x12\x66\x01\0\0\x15\x01\x18\0\x14\x69\0\0\0\x15\x02\x19\0\x16\
\x82\x01\0\0\0\x06\x6e\x01\0\0\x17\x01\x61\x06\x76\x01\0\0\x16\x01\x37\x06\x7e\
\x01\0\0\x15\x01\x2f\x07\x14\x07\x08\x04\x87\x01\0\0\x16\x1e\x18\0\x04\x0e\x13\
\x17\x01\0\0\0\x05\0\x0e\x1a\xa8\x01\0\0\0\x06\x04\x0e\x18\xb8\x01\0\0\0\x07\
\x14\0\x0f\xb4\x01\0\0\x10\x1b\x01\0\0\x10\0\x07\x1b\x06\x01\x06\xc0\x01\0\0\
\x1d\x01\x59\x07\x1c\x02\x01\x04\xc9\x01\0\0\x17\x29\x40\x01\x6a\x39\x18\x20\
\xf8\x01\0\0\x01\x6b\x39\0\x18\x26\x69\0\0\0\x01\x6c\x39\x08\x18\x27\x2f\x02\0\
\0\x01\x6d\x39\x10\x18\x28\x3b\x02\0\0\x01\x6e\x39\x40\0\x17\x25\x08\x01\xfd\
\x1f\x18\x0e\x27\x02\0\0\x01\xfe\x1f\0\x18\x22\x2b\x02\0\0\x01\xff\x1f\x02\x18\
\x24\x2b\x02\0\0\x01\0\x20\x03\x18\x13\x17\x01\0\0\x01\x01\x20\x04\0\x07\x21\
\x07\x02\x07\x23\x08\x01\x0f\x7e\x01\0\0\x10\x1b\x01\0\0\x06\0\x0f\xb4\x01\0\0\
\x10\x1b\x01\0\0\0\0\0\xac\0\0\0\x05\0\0\0\0\0\0\0\x27\0\0\0\x35\0\0\0\x61\0\0\
\0\x7a\0\0\0\x8d\0\0\0\x93\0\0\0\xa3\0\0\0\xa8\0\0\0\xb5\0\0\0\xbb\0\0\0\xcf\0\
\0\0\xe4\0\0\0\xf7\0\0\0\xfa\0\0\0\xff\0\0\0\x03\x01\0\0\x17\x01\0\0\x23\x01\0\
\0\x31\x01\0\0\x35\x01\0\0\x43\x01\0\0\x54\x01\0\0\x64\x01\0\0\x6b\x01\0\0\x73\
\x01\0\0\x75\x01\0\0\x7a\x01\0\0\x7f\x01\0\0\x85\x01\0\0\x8a\x01\0\0\x90\x01\0\
\0\x94\x01\0\0\x98\x01\0\0\xa7\x01\0\0\xad\x01\0\0\xbb\x01\0\0\xc9\x01\0\0\xd5\
\x01\0\0\xd8\x01\0\0\xdd\x01\0\0\xe4\x01\0\0\x55\x62\x75\x6e\x74\x75\x20\x63\
\x6c\x61\x6e\x67\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x31\x34\x2e\x30\x2e\x30\
\x2d\x31\x75\x62\x75\x6e\x74\x75\x31\x2e\x31\0\x73\x69\x67\x6b\x69\x6c\x6c\x2e\
\x62\x70\x66\x2e\x63\0\x2f\x68\x6f\x6d\x65\x2f\x70\x61\x72\x61\x6c\x6c\x65\x6c\
\x73\x2f\x44\x65\x73\x6b\x74\x6f\x70\x2f\x65\x62\x70\x66\x2f\x74\x61\x6c\x6c\
\x65\x72\x2f\x73\x69\x67\x6b\x69\x6c\x6c\0\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\
\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\0\x75\x6e\x73\x69\
\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x5f\x5f\x75\x36\x34\
\0\x62\x70\x66\x5f\x73\x65\x6e\x64\x5f\x73\x69\x67\x6e\x61\x6c\0\x6c\x6f\x6e\
\x67\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x75\x33\x32\0\
\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x72\x65\x73\x65\x72\x76\x65\0\
\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x63\x6f\x6d\
\x6d\0\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x73\x75\x62\x6d\x69\x74\
\0\x72\x62\0\x74\x79\x70\x65\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\
\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\
\x69\x65\x73\0\x68\x61\x6e\x64\x6c\x65\x5f\x70\x74\x72\x61\x63\x65\0\x70\x69\
\x64\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x5f\x5f\x6b\x65\
\x72\x6e\x65\x6c\x5f\x75\x6c\x6f\x6e\x67\x5f\x74\0\x5f\x5f\x6b\x65\x72\x6e\x65\
\x6c\x5f\x73\x69\x7a\x65\x5f\x74\0\x73\x69\x7a\x65\x5f\x74\0\x73\x75\x63\x63\
\x65\x73\x73\0\x65\0\x63\x6f\x6d\x6d\0\x63\x68\x61\x72\0\x5f\x42\x6f\x6f\x6c\0\
\x62\x6f\x6f\x6c\0\x65\x76\x65\x6e\x74\0\x63\x74\x78\0\x65\x6e\x74\0\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\0\x66\x6c\x61\x67\x73\0\x75\
\x6e\x73\x69\x67\x6e\x65\x64\x20\x63\x68\x61\x72\0\x70\x72\x65\x65\x6d\x70\x74\
\x5f\x63\x6f\x75\x6e\x74\0\x74\x72\x61\x63\x65\x5f\x65\x6e\x74\x72\x79\0\x69\
\x64\0\x61\x72\x67\x73\0\x5f\x5f\x64\x61\x74\x61\0\x74\x72\x61\x63\x65\x5f\x65\
\x76\x65\x6e\x74\x5f\x72\x61\x77\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x14\
\0\0\0\x05\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\
\0\0\0\0\0\xd8\x01\0\0\xd8\x01\0\0\x5e\x02\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\
\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\
\0\0\0\x1b\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\
\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\0\x04\0\0\0\0\0\x02\0\0\
\x04\x10\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\x2a\0\
\0\0\0\0\0\x0e\x07\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0a\0\0\0\x2d\0\0\0\x04\0\
\0\x04\x40\0\0\0\x47\0\0\0\x0b\0\0\0\0\0\0\0\x4b\0\0\0\x0e\0\0\0\x40\0\0\0\x4e\
\0\0\0\x10\0\0\0\x80\0\0\0\x53\0\0\0\x12\0\0\0\0\x02\0\0\x5a\0\0\0\x04\0\0\x04\
\x08\0\0\0\x19\0\0\0\x0c\0\0\0\0\0\0\0\x66\0\0\0\x0d\0\0\0\x10\0\0\0\x6c\0\0\0\
\x0d\0\0\0\x18\0\0\0\x7a\0\0\0\x02\0\0\0\x20\0\0\0\x7e\0\0\0\0\0\0\x01\x02\0\0\
\0\x10\0\0\0\x8d\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\0\x9b\0\0\0\0\0\0\x01\x08\0\
\0\0\x40\0\0\x01\xa0\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\x03\0\0\
\0\0\x0f\0\0\0\x04\0\0\0\x06\0\0\0\xae\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\
\0\0\0\0\0\0\x03\0\0\0\0\x11\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\
\0\0\xb3\0\0\0\x09\0\0\0\xb7\0\0\0\x01\0\0\x0c\x13\0\0\0\x58\x02\0\0\x01\0\0\
\x0f\0\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\
\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\
\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x72\x62\0\x74\x72\x61\x63\x65\
\x5f\x65\x76\x65\x6e\x74\x5f\x72\x61\x77\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\
\x72\0\x65\x6e\x74\0\x69\x64\0\x61\x72\x67\x73\0\x5f\x5f\x64\x61\x74\x61\0\x74\
\x72\x61\x63\x65\x5f\x65\x6e\x74\x72\x79\0\x66\x6c\x61\x67\x73\0\x70\x72\x65\
\x65\x6d\x70\x74\x5f\x63\x6f\x75\x6e\x74\0\x70\x69\x64\0\x75\x6e\x73\x69\x67\
\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x63\
\x68\x61\x72\0\x6c\x6f\x6e\x67\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\
\x6e\x67\0\x63\x68\x61\x72\0\x63\x74\x78\0\x68\x61\x6e\x64\x6c\x65\x5f\x70\x74\
\x72\x61\x63\x65\0\x74\x70\x2f\x73\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\
\x5f\x65\x6e\x74\x65\x72\x5f\x70\x74\x72\x61\x63\x65\0\x2f\x68\x6f\x6d\x65\x2f\
\x70\x61\x72\x61\x6c\x6c\x65\x6c\x73\x2f\x44\x65\x73\x6b\x74\x6f\x70\x2f\x65\
\x62\x70\x66\x2f\x74\x61\x6c\x6c\x65\x72\x2f\x73\x69\x67\x6b\x69\x6c\x6c\x2f\
\x73\x69\x67\x6b\x69\x6c\x6c\x2e\x62\x70\x66\x2e\x63\0\x20\x20\x20\x20\x73\x69\
\x7a\x65\x5f\x74\x20\x70\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\
\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x20\
\x3e\x3e\x20\x33\x32\x3b\0\x20\x20\x20\x20\x6c\x6f\x6e\x67\x20\x73\x75\x63\x63\
\x65\x73\x73\x20\x3d\x20\x62\x70\x66\x5f\x73\x65\x6e\x64\x5f\x73\x69\x67\x6e\
\x61\x6c\x28\x39\x29\x3b\0\x20\x20\x20\x20\x65\x20\x3d\x20\x62\x70\x66\x5f\x72\
\x69\x6e\x67\x62\x75\x66\x5f\x72\x65\x73\x65\x72\x76\x65\x28\x26\x72\x62\x2c\
\x20\x73\x69\x7a\x65\x6f\x66\x28\x2a\x65\x29\x2c\x20\x30\x29\x3b\0\x20\x20\x20\
\x20\x69\x66\x20\x28\x65\x29\x20\x7b\0\x20\x20\x20\x20\x20\x20\x20\x20\x65\x2d\
\x3e\x70\x69\x64\x20\x3d\x20\x70\x69\x64\x3b\0\x20\x20\x20\x20\x20\x20\x20\x20\
\x65\x2d\x3e\x73\x75\x63\x63\x65\x73\x73\x20\x3d\x20\x28\x73\x75\x63\x63\x65\
\x73\x73\x20\x3d\x3d\x20\x30\x29\x3b\0\x20\x20\x20\x20\x20\x20\x20\x20\x62\x70\
\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x63\x6f\x6d\x6d\x28\
\x26\x65\x2d\x3e\x63\x6f\x6d\x6d\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x65\x2d\
\x3e\x63\x6f\x6d\x6d\x29\x29\x3b\0\x20\x20\x20\x20\x20\x20\x20\x20\x62\x70\x66\
\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x73\x75\x62\x6d\x69\x74\x28\x65\x2c\x20\
\x30\x29\x3b\0\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\x2e\x6d\
\x61\x70\x73\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\xcc\0\0\
\0\xe0\0\0\0\0\0\0\0\x08\0\0\0\xc5\0\0\0\x01\0\0\0\0\0\0\0\x14\0\0\0\x10\0\0\0\
\xc5\0\0\0\x0c\0\0\0\0\0\0\0\xe2\0\0\0\x1c\x01\0\0\x12\x48\0\0\x10\0\0\0\xe2\0\
\0\0\x4f\x01\0\0\x14\x50\0\0\x28\0\0\0\xe2\0\0\0\x76\x01\0\0\x09\x5c\0\0\x58\0\
\0\0\xe2\0\0\0\xa7\x01\0\0\x09\x60\0\0\x60\0\0\0\xe2\0\0\0\x1c\x01\0\0\x2d\x48\
\0\0\x68\0\0\0\xe2\0\0\0\xb4\x01\0\0\x10\x68\0\0\x78\0\0\0\xe2\0\0\0\xca\x01\0\
\0\x1f\x64\0\0\x88\0\0\0\xe2\0\0\0\xca\x01\0\0\x14\x64\0\0\x90\0\0\0\xe2\0\0\0\
\xef\x01\0\0\x22\x6c\0\0\xa0\0\0\0\xe2\0\0\0\xef\x01\0\0\x09\x6c\0\0\xb0\0\0\0\
\xe2\0\0\0\x28\x02\0\0\x09\x70\0\0\xc8\0\0\0\xe2\0\0\0\x4a\x02\0\0\x05\x7c\0\0\
\x0c\0\0\0\xff\xff\xff\xff\x04\0\x08\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xd8\0\0\0\0\0\0\0\xb2\0\0\0\x05\0\x08\0\x69\0\0\0\x08\x01\x01\xfb\x0e\
\x0d\0\x01\x01\x01\x01\0\0\0\x01\0\0\x01\x01\x01\x1f\x03\0\0\0\0\x2c\0\0\0\x2e\
\0\0\0\x03\x01\x1f\x02\x0f\x05\x1e\x03\x3f\0\0\0\0\xa4\x44\xea\xde\x53\x22\x8b\
\xfd\xb9\x10\x7f\xc9\x44\x52\xd9\x7d\x4d\0\0\0\x01\x2e\x07\x35\xd9\x7e\xa1\x8f\
\x23\x59\x31\x15\x9a\x99\x69\x9f\x02\x57\0\0\0\x02\x65\xe4\xdc\x8e\x31\x21\xf9\
\x1a\x5c\x2c\x9e\xb8\x56\x3c\x56\x92\x04\0\0\x09\x02\0\0\0\0\0\0\0\0\x03\x0f\
\x01\x05\x12\x0a\x14\x05\x14\x30\x05\x09\x3f\x67\x05\x2d\x03\x7a\x20\x05\x10\
\x28\x05\x1f\x2d\x06\x03\x67\x20\x05\x14\x03\x19\x20\x05\x22\x06\x22\x05\x09\
\x06\x2e\x06\x2f\x05\x05\x3f\x02\x02\0\x01\x01\x2f\x68\x6f\x6d\x65\x2f\x70\x61\
\x72\x61\x6c\x6c\x65\x6c\x73\x2f\x44\x65\x73\x6b\x74\x6f\x70\x2f\x65\x62\x70\
\x66\x2f\x74\x61\x6c\x6c\x65\x72\x2f\x73\x69\x67\x6b\x69\x6c\x6c\0\x2e\0\x2f\
\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\x64\x65\x2f\x62\x70\x66\0\x73\x69\x67\x6b\
\x69\x6c\x6c\x2e\x62\x70\x66\x2e\x63\0\x76\x6d\x6c\x69\x6e\x75\x78\x2e\x68\0\
\x62\x70\x66\x5f\x68\x65\x6c\x70\x65\x72\x5f\x64\x65\x66\x73\x2e\x68\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x12\
\x01\0\0\0\0\x03\0\xc8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x19\x01\0\0\0\0\x03\0\x88\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x03\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0a\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x03\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x13\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x03\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xda\0\0\0\x12\0\x03\0\
\0\0\0\0\0\0\0\0\xd8\0\0\0\0\0\0\0\xf6\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\
\x06\0\0\0\x11\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x15\0\0\0\0\0\0\0\x03\0\0\0\
\x0b\0\0\0\x1f\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x23\0\0\0\0\0\0\0\x03\0\0\0\
\x05\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x0c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x10\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x18\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x1c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x24\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x28\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x2c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x30\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x34\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x38\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x3c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x40\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x44\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x48\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x4c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x50\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x54\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x58\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x5c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x60\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x64\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x68\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x6c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x70\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x74\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x78\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x7c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x80\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x84\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x88\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x8c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x90\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x94\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x98\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x9c\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\xa0\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\xa4\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\xa8\0\0\0\0\0\0\0\x03\0\0\0\x08\0\0\0\xac\0\0\0\0\0\0\0\x03\0\0\0\
\x08\0\0\0\x08\0\0\0\0\0\0\0\x02\0\0\0\x0e\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\
\x02\0\0\0\xe8\x01\0\0\0\0\0\0\x04\0\0\0\x0e\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\
\x02\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\
\x02\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\
\x02\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\
\x02\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xb0\0\0\0\0\0\0\0\x04\0\0\0\
\x02\0\0\0\xc0\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xd0\0\0\0\0\0\0\0\x04\0\0\0\
\x02\0\0\0\xe0\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xf0\0\0\0\0\0\0\0\x04\0\0\0\
\x02\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\
\x02\0\0\0\x22\0\0\0\0\0\0\0\x03\0\0\0\x0c\0\0\0\x26\0\0\0\0\0\0\0\x03\0\0\0\
\x0c\0\0\0\x2a\0\0\0\0\0\0\0\x03\0\0\0\x0c\0\0\0\x36\0\0\0\0\0\0\0\x03\0\0\0\
\x0c\0\0\0\x4b\0\0\0\0\0\0\0\x03\0\0\0\x0c\0\0\0\x60\0\0\0\0\0\0\0\x03\0\0\0\
\x0c\0\0\0\x7a\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x0d\x0e\0\x2e\x64\x65\x62\x75\
\x67\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\
\x42\x54\x46\x2e\x65\x78\x74\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x6f\x63\x6c\x69\
\x73\x74\x73\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\x5f\x6f\
\x66\x66\x73\x65\x74\x73\0\x2e\x6d\x61\x70\x73\0\x2e\x64\x65\x62\x75\x67\x5f\
\x73\x74\x72\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\x5f\x73\x74\x72\0\
\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x61\x64\x64\x72\0\x2e\x72\x65\x6c\
\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\
\x64\x72\x73\x69\x67\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\
\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x66\x72\x61\x6d\x65\0\x2e\
\x72\x65\x6c\x74\x70\x2f\x73\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\
\x65\x6e\x74\x65\x72\x5f\x70\x74\x72\x61\x63\x65\0\x68\x61\x6e\x64\x6c\x65\x5f\
\x70\x74\x72\x61\x63\x65\0\x73\x69\x67\x6b\x69\x6c\x6c\x2e\x62\x70\x66\x2e\x63\
\0\x72\x62\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\
\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x42\x42\x30\x5f\x34\0\x4c\x42\x42\x30\x5f\
\x33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf9\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\x14\0\0\0\0\0\0\x20\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbd\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xd8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xb9\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\
\x0f\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x49\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x01\0\0\
\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x22\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x01\0\0\0\0\0\0\x37\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5f\x01\0\0\0\0\0\0\x20\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7e\0\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x7f\x02\0\0\0\0\0\0\x48\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7a\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xa0\x0f\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x19\0\0\0\x08\0\0\0\x08\0\0\0\
\0\0\0\0\x10\0\0\0\0\0\0\0\x36\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xc7\x04\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x32\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x0f\0\0\0\
\0\0\0\xa0\x02\0\0\0\0\0\0\x19\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\
\0\0\x4f\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x77\x05\0\0\0\0\0\0\
\xfe\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x6e\0\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x75\x07\0\0\0\0\0\0\x18\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6a\0\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x12\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x19\0\
\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x0d\x01\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x07\0\0\0\0\0\0\x4e\x04\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\x01\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xb0\x12\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x0f\0\0\0\x08\
\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xe0\x0b\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x15\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x12\
\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\x19\0\0\0\x11\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\
\0\0\0\0\xac\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x0c\0\0\0\0\0\
\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\0\0\
\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x13\0\0\0\0\0\0\x20\0\0\0\0\
\0\0\0\x19\0\0\0\x13\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x9c\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x0d\0\0\0\0\0\0\xb6\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\0\0\0\x09\0\0\0\x40\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xb0\x13\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x19\0\0\0\x15\0\0\
\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x5a\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\xbe\x0d\0\0\0\0\0\0\x69\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\x8a\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\
\0\0\0\0\x20\x14\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\x19\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\x01\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\
\x0e\0\0\0\0\0\0\x68\x01\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x18\
\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct sigkill *sigkill::open(const struct bpf_object_open_opts *opts) { return sigkill__open_opts(opts); }
struct sigkill *sigkill::open_and_load() { return sigkill__open_and_load(); }
int sigkill::load(struct sigkill *skel) { return sigkill__load(skel); }
int sigkill::attach(struct sigkill *skel) { return sigkill__attach(skel); }
void sigkill::detach(struct sigkill *skel) { sigkill__detach(skel); }
void sigkill::destroy(struct sigkill *skel) { sigkill__destroy(skel); }
const void *sigkill::elf_bytes(size_t *sz) { return sigkill__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
sigkill__assert(struct sigkill *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __SIGKILL_SKEL_H__ */
